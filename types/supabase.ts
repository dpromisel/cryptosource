/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/builds": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.builds.id"];
          submitted?: parameters["rowFilter.builds.submitted"];
          dataset?: parameters["rowFilter.builds.dataset"];
          finished?: parameters["rowFilter.builds.finished"];
          status?: parameters["rowFilter.builds.status"];
          api_requests?: parameters["rowFilter.builds.api_requests"];
          address?: parameters["rowFilter.builds.address"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["builds"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** builds */
          builds?: definitions["builds"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.builds.id"];
          submitted?: parameters["rowFilter.builds.submitted"];
          dataset?: parameters["rowFilter.builds.dataset"];
          finished?: parameters["rowFilter.builds.finished"];
          status?: parameters["rowFilter.builds.status"];
          api_requests?: parameters["rowFilter.builds.api_requests"];
          address?: parameters["rowFilter.builds.address"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.builds.id"];
          submitted?: parameters["rowFilter.builds.submitted"];
          dataset?: parameters["rowFilter.builds.dataset"];
          finished?: parameters["rowFilter.builds.finished"];
          status?: parameters["rowFilter.builds.status"];
          api_requests?: parameters["rowFilter.builds.api_requests"];
          address?: parameters["rowFilter.builds.address"];
        };
        body: {
          /** builds */
          builds?: definitions["builds"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/datasets": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.datasets.id"];
          created_at?: parameters["rowFilter.datasets.created_at"];
          rootKey?: parameters["rowFilter.datasets.rootKey"];
          description?: parameters["rowFilter.datasets.description"];
          name?: parameters["rowFilter.datasets.name"];
          relativeKey?: parameters["rowFilter.datasets.relativeKey"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["datasets"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** datasets */
          datasets?: definitions["datasets"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.datasets.id"];
          created_at?: parameters["rowFilter.datasets.created_at"];
          rootKey?: parameters["rowFilter.datasets.rootKey"];
          description?: parameters["rowFilter.datasets.description"];
          name?: parameters["rowFilter.datasets.name"];
          relativeKey?: parameters["rowFilter.datasets.relativeKey"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.datasets.id"];
          created_at?: parameters["rowFilter.datasets.created_at"];
          rootKey?: parameters["rowFilter.datasets.rootKey"];
          description?: parameters["rowFilter.datasets.description"];
          name?: parameters["rowFilter.datasets.name"];
          relativeKey?: parameters["rowFilter.datasets.relativeKey"];
        };
        body: {
          /** datasets */
          datasets?: definitions["datasets"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/tokens": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tokens.id"];
          address?: parameters["rowFilter.tokens.address"];
          inserted_at?: parameters["rowFilter.tokens.inserted_at"];
          updated_at?: parameters["rowFilter.tokens.updated_at"];
          name?: parameters["rowFilter.tokens.name"];
          website?: parameters["rowFilter.tokens.website"];
          symbol?: parameters["rowFilter.tokens.symbol"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["tokens"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** tokens */
          tokens?: definitions["tokens"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tokens.id"];
          address?: parameters["rowFilter.tokens.address"];
          inserted_at?: parameters["rowFilter.tokens.inserted_at"];
          updated_at?: parameters["rowFilter.tokens.updated_at"];
          name?: parameters["rowFilter.tokens.name"];
          website?: parameters["rowFilter.tokens.website"];
          symbol?: parameters["rowFilter.tokens.symbol"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.tokens.id"];
          address?: parameters["rowFilter.tokens.address"];
          inserted_at?: parameters["rowFilter.tokens.inserted_at"];
          updated_at?: parameters["rowFilter.tokens.updated_at"];
          name?: parameters["rowFilter.tokens.name"];
          website?: parameters["rowFilter.tokens.website"];
          symbol?: parameters["rowFilter.tokens.symbol"];
        };
        body: {
          /** tokens */
          tokens?: definitions["tokens"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  builds: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    submitted?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `datasets.id`.<fk table='datasets' column='id'/>
     */
    dataset?: number;
    /** Format: timestamp with time zone */
    finished?: string;
    /** Format: text */
    status: string;
    /** Format: bigint */
    api_requests?: number;
    /**
     * Format: text
     * @description Note:
     * This is a Foreign Key to `tokens.address`.<fk table='tokens' column='address'/>
     */
    address: string;
  };
  /** @description Table describing datasets available with mappings to external resources */
  datasets: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    rootKey: string;
    /** Format: text */
    description?: string;
    /** Format: text */
    name: string;
    /** Format: text */
    relativeKey: string;
  };
  tokens: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    address: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    inserted_at: string;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    updated_at: string;
    /** Format: text */
    name?: string;
    /** Format: text */
    website?: string;
    /** Format: text */
    symbol?: string;
  };
}

export interface parameters {
  /** @description Preference */
  preferParams: "params=single-object";
  /** @description Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** @description Preference */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description builds */
  "body.builds": definitions["builds"];
  /** Format: bigint */
  "rowFilter.builds.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.builds.submitted": string;
  /** Format: bigint */
  "rowFilter.builds.dataset": string;
  /** Format: timestamp with time zone */
  "rowFilter.builds.finished": string;
  /** Format: text */
  "rowFilter.builds.status": string;
  /** Format: bigint */
  "rowFilter.builds.api_requests": string;
  /** Format: text */
  "rowFilter.builds.address": string;
  /** @description datasets */
  "body.datasets": definitions["datasets"];
  /** Format: bigint */
  "rowFilter.datasets.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.datasets.created_at": string;
  /** Format: text */
  "rowFilter.datasets.rootKey": string;
  /** Format: text */
  "rowFilter.datasets.description": string;
  /** Format: text */
  "rowFilter.datasets.name": string;
  /** Format: text */
  "rowFilter.datasets.relativeKey": string;
  /** @description tokens */
  "body.tokens": definitions["tokens"];
  /** Format: bigint */
  "rowFilter.tokens.id": string;
  /** Format: text */
  "rowFilter.tokens.address": string;
  /** Format: timestamp with time zone */
  "rowFilter.tokens.inserted_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.tokens.updated_at": string;
  /** Format: text */
  "rowFilter.tokens.name": string;
  /** Format: text */
  "rowFilter.tokens.website": string;
  /** Format: text */
  "rowFilter.tokens.symbol": string;
}

export interface operations {}

export interface external {}
